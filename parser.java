
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\026\000\002\002\005\000\002\002\004\000\002\007" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\006\010\000" +
    "\002\004\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\006\000\002\010\006\000\002\010" +
    "\006\000\002\013\003\000\002\013\003\000\002\012\003" +
    "\000\002\012\003\000\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\021\004\001\002\000\004\011\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\022\010\010\012\017\013\011\014\015\015\021\016" +
    "\025\017\013\020\016\001\002\000\004\006\066\001\002" +
    "\000\004\006\063\001\002\000\004\011\062\001\002\000" +
    "\004\006\057\001\002\000\004\011\055\001\002\000\004" +
    "\006\052\001\002\000\004\006\045\001\002\000\004\006" +
    "\040\001\002\000\004\011\036\001\002\000\004\011\uffff" +
    "\001\002\000\004\011\034\001\002\000\004\011\032\001" +
    "\002\000\004\002\001\001\002\000\004\024\026\001\002" +
    "\000\004\004\027\001\002\000\006\022\031\023\030\001" +
    "\002\000\004\011\ufff2\001\002\000\004\011\ufff3\001\002" +
    "\000\022\010\010\012\017\013\011\014\015\015\021\016" +
    "\025\017\013\020\016\001\002\000\004\002\ufffb\001\002" +
    "\000\022\010\010\012\017\013\011\014\015\015\021\016" +
    "\025\017\013\020\016\001\002\000\004\002\ufffe\001\002" +
    "\000\022\010\010\012\017\013\011\014\015\015\021\016" +
    "\025\017\013\020\016\001\002\000\004\002\ufffc\001\002" +
    "\000\006\023\041\024\042\001\002\000\006\005\uffed\007" +
    "\uffed\001\002\000\006\005\uffec\007\uffec\001\002\000\004" +
    "\007\044\001\002\000\004\011\ufff4\001\002\000\006\023" +
    "\041\024\042\001\002\000\004\005\047\001\002\000\006" +
    "\023\041\024\042\001\002\000\004\007\051\001\002\000" +
    "\004\011\ufff9\001\002\000\006\023\041\024\042\001\002" +
    "\000\004\007\054\001\002\000\004\011\ufff7\001\002\000" +
    "\022\010\010\012\017\013\011\014\015\015\021\016\025" +
    "\017\013\020\016\001\002\000\004\002\ufffd\001\002\000" +
    "\006\023\041\024\042\001\002\000\004\007\061\001\002" +
    "\000\004\011\ufff6\001\002\000\004\002\ufffa\001\002\000" +
    "\006\023\041\024\042\001\002\000\004\007\065\001\002" +
    "\000\004\011\ufff5\001\002\000\006\022\070\024\067\001" +
    "\002\000\004\007\uffef\001\002\000\004\007\uffee\001\002" +
    "\000\004\007\072\001\002\000\004\011\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\070\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\023\004\013" +
    "\005\017\006\021\007\011\010\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\032\004\013\005\017\006" +
    "\021\007\011\010\022\001\001\000\002\001\001\000\016" +
    "\003\034\004\013\005\017\006\021\007\011\010\022\001" +
    "\001\000\002\001\001\000\016\003\036\004\013\005\017" +
    "\006\021\007\011\010\022\001\001\000\002\001\001\000" +
    "\004\011\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\045\001" +
    "\001\000\002\001\001\000\004\011\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\055\004\013" +
    "\005\017\006\021\007\011\010\022\001\001\000\002\001" +
    "\001\000\004\011\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	static parser analizador;
	public static void main (String argv[]) throws Exception
	{

		analizador = new parser(new Scan(new InputStreamReader(System.in)));

    try
		{
		  analizador.parse();
		}
		catch(Exception e)
		{
		  e.printStackTrace();
		  System.out.println("Error fatal");
		}
	}




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


      DrawFinal Dibujar = new DrawFinal();

      public void salir()
      {
		System.out.println("Presione cualquier tecla para Terminar.");
		try
		{
		InputStreamReader reader = new InputStreamReader(System.in);
		BufferedReader buffer = new BufferedReader(reader);
                buffer.readLine();
		}
		catch (Exception e) {
		  System.exit(0);
		}
		System.exit(0);
      }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Inicio ::= EDITAR SALTOLI Inst 
            {
              Object RESULT =null;
		

	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Termino ::= TERMINO 
            {
              Object RESULT =null;
		
		salir();
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Termino",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inst ::= Pos SALTOLI Inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Inst ::= Color SALTOLI Inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Inst ::= Linea SALTOLI Inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Inst ::= DaValor SALTOLI Inst 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Inst ::= Termino SALTOLI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inst",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Pos ::= POS LP IdVar COMA IdVar RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
      Dibujar.setPosition(Integer.valueOf(E1),Integer.valueOf(E2));


	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Pos",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Color ::= COLOR LP IdCol RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

		  Dibujar.setColor(E1);

	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Color",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Linea ::= DER LP IdVar RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		  Dibujar.drawLinea(Integer.valueOf(E1),"der");
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Linea ::= IZQ LP IdVar RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        Dibujar.drawLinea(Integer.valueOf(E1),"izq");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Linea ::= ARR LP IdVar RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          Dibujar.drawLinea(Integer.valueOf(E1),"arr");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Linea ::= ABA LP IdVar RP 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
          Dibujar.drawLinea(Integer.valueOf(E1),"aba");
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DaValor ::= DAVALOR ID EQ NCOLOR 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dibujar.toStringTable(E1,E2);
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DaValor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DaValor ::= DAVALOR ID EQ NUMERO 
            {
              Object RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		Dibujar.toStringTable(E1,E2);
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DaValor",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Dato ::= NUMERO 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = E1;
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dato",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Dato ::= NCOLOR 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   RESULT = E1;
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dato",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdCol ::= ID 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      RESULT = Dibujar.fromStringTable(E1);
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdCol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdCol ::= NCOLOR 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        RESULT = E1;
      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdCol",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IdVar ::= NUMERO 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
		RESULT = E1;
	    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IdVar ::= ID 
            {
              String RESULT =null;
		int E1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String E1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = Dibujar.fromStringTable(E1);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdVar",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
